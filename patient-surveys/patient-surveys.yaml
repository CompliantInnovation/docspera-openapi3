openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DocSpera/patient-survey-api/1.0.0
info:
  description: APIs to serve patient surveys
  version: "2.0.0-alpha1"
  title: Patient Survey APIs
  x-logo:
    url: https://docspera.com/assets/D3/pic/Logo-Full-White-Padded.png
    backgroundColor: "#0096FA"
    href: https://docspera.com
  contact:
    email: luca@docspera.com
  license:
    name: Proprietary
tags:
  - name: surveyapi
    x-displayName: "Survey Frontend APIs"
    description: |
      patient survey apis, available via secured links
  - name: surveyadmin
    x-displayName: "Survey Creation APIs"
    description: |
      apis for use in creating surveys, dashboard serving
paths:
  /api/v1/surveys/{surveyId}:
    parameters:
      - in: path
        name: surveyId
        description: survey uuid
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - surveyapi
      summary: Get survey and questions
      operationId: getSurvey
      responses:
        '200':
          description: survey response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '400':
          description: bad request, survey already completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: bad_request
                description: survey already completed
        '404':
          description: survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: not_found
                description: survey not found
  /api/v1/surveys/{surveyId}/responses:
    parameters:
      - in: path
        name: surveyId
        description: survey uuid
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - surveyapi
      summary: Get survey responses
      description: |
        gets current survey response questions, if the survey is not already completed
      operationId: getSurveyResponses
      responses:
        '200':
          description: survey response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: bad request, survey already completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: bad_request
                description: survey already completed
        '404':
          description: survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: not_found
                description: survey not found
    put:
      tags:
        - surveyapi
      summary: Save survey responses
      description: |
        saves all of the current survey response questions
      operationId: saveSurveyResponses
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/QuestionResponse'
      responses:
        '200':
          description: responses saved
        '400':
          description: bad request, survey already completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: bad_request
                description: survey already completed
        '404':
          description: survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: not_found
                description: survey not found
  /api/v1/surveys/{surveyId}/responses/{questionId}:
    parameters:
      - in: path
        name: surveyId
        description: survey uuid
        required: true
        schema:
          type: string
          format: uuid
      - in: path
        name: questionId
        description: question uuid, belonging to the survey
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - surveyapi
      summary: Get a question response
      description: |
        gets the current response for a particular question in a survey, if the survey is not already completed
      operationId: getSurveyResponse
      responses:
        '200':
          description: survey response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: bad request, survey already completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: bad_request
                description: survey already completed
        '404':
          description: survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: not_found
                description: survey not found
    put:
      tags:
        - surveyapi
      summary: Save a question response
      description: |
        saves question response for a survey
      operationId: saveSurveyResponse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionResponse'
      responses:
        '200':
          description: responses saved
        '400':
          description: bad request, survey already completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: bad_request
                description: survey already completed
        '404':
          description: survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: not_found
                description: survey not found
  /api/v1/surveys/{surveyId}/status:
    parameters:
      - in: path
        name: surveyId
        description: survey uuid
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags:
        - surveyapi
      summary: Complete survey
      operationId: completeSurvey
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: integer
                  format: int32
                  enum: [2]
                  description: status for survey completed
      responses:
        '200':
          description: survey successfully completed
        '400':
          description: bad request, survey already completed or invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: bad_request
                description: survey already completed
        '404':
          description: survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: not_found
                description: survey not found
  /api/v1/admin/templates:
    get:
      tags:
        - surveyadmin
      summary: Get survey templates
      operationId: getSurveyTemplates
      parameters:
        - name: limit
          in: query
          description: cursor pagination per page limit
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 100
            default: 50
          required: false
        - name: token
          in: query
          description: cursor pagination token
          schema:
            type: string
          required: false
        - name: practiceId
          in: query
          description: practice id to filter surveys by
          schema:
            type: integer
            format: int64
          required: true
        - name: userId
          in: query
          description: user id belonging to the practice to filter results by
          schema:
            type: integer
            format: int64
            description: ae2 encoded user id
          required: false
        - name: includeGlobal
          in: query
          description: include global templates provided by docspera in the results
          schema:
            type: boolean
            nullable: false
            default: true
          required: false
      security:
        - signedCookie: []
        - jwt: []
      responses:
        '200':
          description: list of survey templates
          content:
            application/json:
              schema:
                type: array
                description: array of survey templates
                items:
                  $ref: '#/components/schemas/SurveyTemplate'
    post:
      tags:
        - surveyadmin
      summary: Create survey template
      operationId: createSurveyTemplates
      security:
        - signedCookie: []
        - jwt: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - global
                - practiceId
                - userId
                - branding
              properties:
                global:
                  type: boolean
                  default: false
                practiceId:
                  type: integer
                  format: int64
                  nullable: true
                  description: practice id to associate the template to
                userId:
                  type: integer
                  format: int64
                  nullable: true
                  description: user id to associate the template to
                branding:
                  type: object
                  required:
                    - logo
                    - logoCaption
                    - bannerTitle
                  propertie:
                    logo:
                      type: string
                      format: uri
                      nullable: true
                    logoCaption:
                      type: string
                      nullable: true
                    bannerTitle:
                      type: string
                      nullable: true
      responses:
        '200':
          description: new survey template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyTemplate'
  /api/v1/admin/templates/{templateId}:
    get:
      tags:
        - surveyadmin
      summary: Get a survey template
      operationId: getSurveyTemplate
      parameters:
        - in: path
          name: templateId
          required: true
          schema:
            type: string
            format: uuid
      security:
        - signedCookie: []
        - jwt: []
      responses:
        '200':
          description: survey template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyTemplate'
  /api/v1/admin/templates/{templateId}/sections:
    get:
      tags:
        - surveyadmin
      summary: Get a survey template's sections
      operationId: getSurveyTemplateSections
      parameters:
        - in: path
          name: templateId
          required: true
          schema:
            type: string
            format: uuid
      security:
        - signedCookie: []
        - jwt: []
      responses:
        '200':
          description: survey template sections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Section'
  /api/v1/admin/surveygroups:
    get:
      summary: Get survey groups
      description: get survey groups
      operationId: getSurveyGroups
      tags:
        - surveyadmin
      parameters:
        - name: limit
          in: query
          description: cursor pagination per page limit
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 100
            default: 50
          required: false
        - name: token
          in: query
          description: cursor pagination token
          schema:
            type: string
          required: false
        - name: practiceId
          in: query
          description: practice id to filter surveys by
          schema:
            type: integer
            format: int64
          required: true
        - name: userId
          in: query
          description: user id belonging to the practice to filter results by
          schema:
            type: integer
            format: int64
            description: ae2 encoded user id
          required: false
      security:
        - signedCookie: []
        - jwt: []
      responses:
        '200':
          description: list of survey groups
          content:
            application/json:
              schema:
                type: array
                description: array of survey groups
                items:
                  $ref: '#/components/schemas/SurveyGroup'
  /api/v1/admin/surveygroups/{groupId}:
    get:
      summary: Get a survey group
      description: get a survey group
      operationId: getSurveyGroup
      tags:
        - surveyadmin
      parameters:
        - name: groupId
          in: path
          required: true
          description: survey group id
          schema:
            type: string
            format: uuid
      security:
        - signedCookie: []
        - jwt: []
      responses:
        '200':
          description: list of survey groups
          content:
            application/json:
              schema:
                type: array
                description: array of survey groups
                items:
                  $ref: '#/components/schemas/SurveyGroup'
  /api/v1/admin/surveygroups/{groupId}/recipients:
    get:
      summary: Get survey group recipients
      description: get survey group recipients
      operationId: getSurveyGroupRecipients
      tags:
        - surveyadmin
      parameters:
        - name: limit
          in: query
          description: cursor pagination per page limit
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 100
            default: 50
          required: false
        - name: token
          in: query
          description: cursor pagination token
          schema:
            type: string
          required: false
        - name: groupId
          in: path
          required: true
          description: survey group id
          schema:
            type: string
            format: uuid
      security:
        - signedCookie: []
        - jwt: []
      responses:
        '200':
          description: list of survey group recipients
          content:
            application/json:
              schema:
                type: array
                description: array of survey groups
                items:
                  $ref: '#/components/schemas/SurveyRecipient'
  /api/v1/admin/surveygroups/{groupId}/responses:
    get:
      summary: Get survey group responses
      description: get survey group responses
      operationId: getSurveyGroupResponses
      tags:
        - surveyadmin
      parameters:
        - name: limit
          in: query
          description: cursor pagination per page limit
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 100
            default: 50
          required: false
        - name: token
          in: query
          description: cursor pagination token
          schema:
            type: string
          required: false
        - name: groupId
          in: path
          required: true
          description: survey group id
          schema:
            type: string
            format: uuid
      security:
        - signedCookie: []
        - jwt: []
      responses:
        '200':
          description: list of surveys
          content:
            application/json:
              schema:
                type: array
                description: array of surveys
                items:
                  type: object
  /api/v1/admin/surveyresponses:
    get:
      summary: Get all survey responses
      description: Get all survey responses
      operationId: getAllRecipientSurveyResponses
      tags:
        - surveyadmin
      parameters:
        - name: limit
          in: query
          description: cursor pagination per page limit
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 100
            default: 50
          required: false
        - name: token
          in: query
          description: cursor pagination token
          schema:
            type: string
          required: false
        - name: practiceId
          in: query
          description: practice id to filter surveys by
          schema:
            type: integer
            format: int64
          required: true
        - name: userId
          in: query
          description: user id belonging to the practice to filter results by
          schema:
            type: integer
            format: int64
            description: ae2 encoded user id
          required: false
        - name: groupId
          in: query
          required: false
          description: survey group id
          schema:
            type: string
            format: uuid
      security:
        - signedCookie: []
        - jwt: []
      responses:
        '200':
          description: list of surveys
          content:
            application/json:
              schema:
                type: array
                description: array of surveys
                items:
                  type: object
components:
  securitySchemes:
    signedCookie:
      type: apiKey
      in: cookie
      name: docsperajwt
      description: docspera signed jwt cookie
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      required:
        - error
        - description
      properties:
        error:
          type: string
          description: error type
        description:
          type: string
          description: error_message
    QuestionResponse:
      type: object
      required:
        - id
        - value
      properties:
        id:
          type: string
          format: uuid
          description: question uuid
        value:
          description: current value of the question response, can by any type depending on the question
          nullable: true
    SurveyTemplate:
      type: object
      required:
        - id
        - createdAt
        - global
        - name
        - practiceId
        - userId
        - branding
      properties:
        id:
          type: string
          format: uuid
          description: survey uuid, also present in the request url
        createdAt:
          type: string
          format: 'date-time'
          description: timestamp of creation
        global:
          type: boolean
          description: if the template is global to all users of docspera
        name:
          type: string
          nullable: true
          default: null
          description: template name
        practiceId:
          type: integer
          format: int64
          description: practice id that the template belongs to
          nullable: true
        userId:
          type: integer
          format: int64
          description: user id that the template belongs to
          nullable: true
        branding:
          $ref: '#/components/schemas/SurveyBranding'
    SurveyBranding:
      type: object
      required:
        - logo
        - logoCaption
        - bannerTitle
      properties:
        logo:
          type: string
          format: url
          description: url to provider profile picture
          nullable: true
        logoCaption:
          type: string
          nullable: true
          description: text to be displayed under the logo
        bannerTitle:
          type: string
          description: provider name
    SurveyGroup:
      type: object
      required:
        - groupId
        - status
        - createdAt
        - userId
        - practiceId
        - events
        - surveyTemplate
        - destinationTemplates
      properties:
        group_id:
          type: string
        status:
          type: integer
        createdAt:
          type: string
          format: 'date-time'
          description: timestamp of creation
        surveyTemplate:
          $ref: '#/components/schemas/SurveyTemplate'
        practiceId:
          type: integer
          format: int64
          description: practice id that the template belongs to
          nullable: true
        userId:
          type: integer
          format: int64
          description: user id that the template belongs to
        events:
          type: array
          items:
            $ref: '#/components/schemas/SurveyGroupEvent'
        destinationTemplates:
          type: array
          items:
            type: object
            required:
              - destinationType
              - template
              - templateMappings
            properties:
              destinationType:
                type: string
                description: survey destination type
                enum:
                  - "email"
                  - "sms"
              template:
                type: string
                description: survey template, tbd
              templateMappings:
                type: array
                items:
                  type: object
                  required:
                    - field
                    - mapping
                  properties:
                    field:
                      type: string
                      description: field in template, tbd
                    mapping:
                      type: string
                      enum:
                        - patientName
                        - caseDate
                        - providerName
    SurveyRecipient:
      type: object
      required:
        - id
        - patientId
        - calendarId
        - name
        - mrn
        - destinations
      properties:
        id:
          type: string
          format: uuid
          description: recipient uuid
        patientId:
          type: integer
          format: int64
          description: docspera patient id, if available
          nullable: true
        calendarId:
          type: integer
          format: int64
          description: docspera calendar id, if available
          nullable: true
        name:
          type: string
          description: recipient name
          nullable: true
        mrn:
          type: string
          description: mrn to be displayed for tracking, if available
          nullable: true
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/SurveyRecipientDestination'
    SurveyRecipientDestination:
      type: object
      required:
        - type
        - destination
      properties:
        type:
          type: string
          description: survey destination type
          enum:
            - "email"
            - "sms"
        destination:
          type: string
          description: suvey destination value
    SurveyGroupEvent:
      type: object
    Survey:
      type: object
      required:
        - id
        - status
        - createdAt
        - lastEvent
        - branding
        - sections
      properties:
        id:
          type: string
          format: uuid
          description: survey recipient uuid, also present in the request url
        status:
          type: integer
          enum: [0,1,2]
          description: |
            `0` undefined, `1` not yet submitted, `2` submitted
        createdAt:
          type: string
          format: 'date-time'
          description: timestamp of creation
        lastEvent:
          nullable: true
          type: string
          format: 'date-time'
          description: timestamp of last event, i.e. last time patient opened survey
        branding:
          $ref: '#/components/schemas/SurveyBranding'
        sections:
          type: array
          items:
            $ref: '#/components/schemas/Section'
    Section:
      type: object
      required:
        - order
        - title
        - subtext
        - icon
        - subsections
      properties:
        order:
          type: integer
          format: int64
          description: relative order amongst siblings, lower (including negatives) is higher priority
        title:
          type: string
          description: title of the section
        subtext:
          type: string
          description: subtext of the header for the section
        icon:
          type: string
          format: url
          description: url to the icon to be displayed on the section header
          nullable: true
        subsections:
          type: array
          description: array of subsections to be displayed under this heading
          items:
            $ref: '#/components/schemas/SubSection'
    SubSection:
      type: object
      required:
        - title
        - icon
        - questions
      properties:
        title:
          type: string
          description: title of the subsection
        icon:
          type: string
          format: url
          description: url to the icon to be displayed on the subsection header
          nullable: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/PatientQuestion'
    PatientQuestion:
      type: object
      required:
        - id
        - slug
        - prompt
        - required
        - input
      properties:
        id:
          type: string
          format: uuid
          description: unique question id
        slug:
          type: string
          description: question slug description, useful when a question is reused on multiple surveys or for debugging
        prompt:
          type: string
          description: prompt that the patient is presented with
        required:
          type: boolean
          default: false
          description: whether the question must be answered by the user or not
        input:
          oneOf:
            - $ref: '#/components/schemas/EnumeratedDropdown'
            - $ref: '#/components/schemas/RangedValueDropdown'
            - $ref: '#/components/schemas/EnumeratedRadioSelect'
            - $ref: '#/components/schemas/EnumeratedMultipleChoiceRadioSelect'
            - $ref: '#/components/schemas/NumericInput'
            - $ref: '#/components/schemas/DimensionInput'
            - $ref: '#/components/schemas/NumericRangedSliderInput'
          discriminator:
            propertyName: type
            mapping:
              enumDropdown: '#/components/schemas/EnumeratedDropdown'
              rangeDropdown: '#/components/schemas/RangedValueDropdown'
              enumRadio: '#/components/schemas/EnumeratedRadioSelect'
              enumRadioMultipleChoice: '#/components/schemas/EnumeratedMultipleChoiceRadioSelect'
              numInput: '#/components/schemas/NumericInput'
              dimensionInput: '#/components/schemas/DimensionInput'
              rangeSlider: '#/components/schemas/NumericRangedSliderInput'
    QuestionInput:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [enumDropdown, rangeDropdown, enumRadio, enumRadioMultipleChoice, numInput, dimInput, rangeSlider]
          description: question type. defined in the question type spec
        options:
          type: object
    EnumeratedDropdown:
      description: |
        Dropdown showing an enumerated list of options with corresponding `display => value` relationships.
        Options are arranged relative to each other based on `order` key. Lower `order` values appear first (at the top) in the list of options.
        The option with the highest priority (lowest `order` value) that contains `isDefault : true` is default selected.
        If no option is denotated as default, then the first option in the list (again, lowest `order` value) is used as default selected (this is by nature of HTML inputs as well).
        When responding, values are exactly the same type and value as the value provided from the question specification.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^enumDropdown$"
            options:
              type: object
              required:
                - enums
              properties:
                enums:
                  type: array
                  description: array of enumerated option properties
                  items:
                    type: object
                    required:
                      - display
                      - value
                      - order
                    properties:
                      display:
                        type: string
                        description: value to show in the dropdown to the user
                      value:
                        description: value to be recorded when option is selected, any type is applicable
                      order:
                        type: integer
                        format: int64
                        description: order relative to siblings, lower value is higher priority (including negatives)
                      isDefault:
                        type: boolean
                        default: false
                        description: whether the option is considered the default option
                    example:
                      display: Yes
                      value: true
                      order: 0
                      isDefault: true
      example:
        type: enumDropdown
        options:
          enumns:
            - display: ''
              value: -1
              order: 0
              isDefault: true
            - display: 'Yes'
              value: true
              order: 1
              isDefault: false
            - display: 'No'
              value: false
              order: 2
              isDefault: false
    RangedValueDropdown:
      description: |
        Dropdown showing a computed list of numerically ranged values, according the `min`, `max`, `step`, and `precision`.
        If `step` is `null` or not present, assumed value of 1.
        If `precision` is `null` or not present, no precision considerations will be made.
        Values are arranged in descending order when `order: -1`, and ascending when `order: 1`.
        The example below will produce a dropdown of values from 5-1 descending with single-digit precision.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^rangeDropdown$"
            options:
              type: object
              required:
                - min
                - max
              properties:
                min:
                  type: integer
                  format: int64
                  description: minimum value for slider
                max:
                  type: integer
                  format: int64
                  description: maximum value for slider
                step:
                  type: number
                  format: double
                  default: 1.00
                  description: steps in the slider inbetween the ranges, should fit in the specified range
                precision:
                  type: integer
                  format: int64
                  description: number of significant digits to record in the result, if null or not present no precision considerations will be made
                  nullable: true
                order:
                  type: integer
                  format: int32
                  enum: [-1, 1]
                  description: sets ascending or decending from left to right with values of 1 and -1 respectively
      example:
        type: rangeDropdown
        options:
          min: 0
          max: 5
          step: 1
          precision: 1
          order: -1
    EnumeratedRadioSelect:
      description: |
        Analogous to enumerated drop down, except displayed as radio buttons, showing an enumerated list of options with corresponding `display => value` relationships.
        When `orientation : 1`, the radio options are displayed horizantally. When `orientation : -1`, the radio options are displayed vertically.
        Options are arranged relative to each other based on `order` key. Lower `order` values appear first (at the top or left-most) in the list of options.
        The option with the highest priority (lowest `order` value) that contains `isDefault : true` is default selected.
        If no option is denotated as default, then no option is defalt selected.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^enumRadio$"
            options:
              type: object
              required:
                - enums
              properties:
                enums:
                  type: array
                  description: array of enumerated option properties
                  items:
                    type: object
                    required:
                      - display
                      - value
                      - order
                    properties:
                      display:
                        type: string
                        description: value to show in the dropdown to the user
                      value:
                        description: value to be recorded when option is selected, any type is applicable
                      order:
                        type: integer
                        format: int64
                        description: order relative to siblings, lower value is higher priority (including negatives)
                      isDefault:
                        type: boolean
                        default: false
                        description: whether the option is considered the default option
                  example:
                    - display: Yes
                      value: true
                      order: 0
                      isDefault: true
      example:
        type: enumDropdown
        options:
          enumns:
            - display: ''
              value: -1
              order: 0
              isDefault: true
            - display: 'Yes'
              value: true
              order: 1
              isDefault: false
            - display: 'No'
              value: false
              order: 2
              isDefault: false
    EnumeratedMultipleChoiceRadioSelect:
      description: |
        An extension of the Enumerated Radio Select, this allows for multiple radio options to be selected.
        `isDefault` can be defined multiple times and defines an input that is selected by default.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^enumRadioMultipleChoice$"
            options:
              type: object
              required:
                - enums
              properties:
                orientation:
                  type: integer
                  enum: [-1, 1]
                  format: int32
                  default: 1
                enums:
                  type: array
                  description: array of enumerated option properties
                  items:
                    type: object
                    required:
                      - display
                      - value
                      - order
                    properties:
                      display:
                        type: string
                        description: value to show in the dropdown to the user
                      value:
                        description: value to be recorded when option is selected, any type is applicable
                      order:
                        type: integer
                        format: int64
                        description: order relative to siblings, lower value is higher priority (including negatives)
                      isDefault:
                        type: boolean
                        default: false
                        description: whether the option is considered the default option
                    example:
                      display: Yes
                      value: true
                      order: 0
                      isDefault: true
      example:
        type: enumRadioMultipleChoice
        options:
          orientation: 1
          enumns:
            - display: ''
              value: -1
              order: 0
              isDefault: true
            - display: 'Yes'
              value: true
              order: 1
              isDefault: false
            - display: 'No'
              value: false
              order: 2
              isDefault: false
    NumericInput:
      description: |
        Records a numeric input from the user
        If `step` is `null` or not present, assumed value of 1.
        If `precision` is `null` or not present, no precision considerations will be made.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^numInput$"
            options:
              type: object
              required:
                - min
                - max
              properties:
                min:
                  type: integer
                  format: int64
                  description: minimum value for slider
                max:
                  type: integer
                  format: int64
                  description: maximum value for slider
                step:
                  type: number
                  format: double
                  default: 1.00
                  description: steps in the slider inbetween the ranges, should fit in the specified range
                precision:
                  type: integer
                  format: int64
                  description: number of significant digits to record in the result, if null or not present no precision considerations will be made
                  nullable: true
      example:
        type: numInput
        options:
          min: 0
          max: 5
          step: 1
          precision: 1
    DimensionInput:
      description: |
        Records a measurement input from the user with units.
        Units are always input in the patient's default locale (usually `imperial`). The exact unit is determined by the dimension and is delegated to the frontend.
        Units are converted to the destination unit if specified in the `recordUnit` property (`null` by defaul or not specified). Note that the conversion is transparent to the user and should not be made known. This is meerly a standardization procedure.
        Patient inputs can be split into major and minor parts (e.g. feet and inches, pounds and ounces, etc.) unless `noMajorMinor` flag is `true` (`false` by default or not
        specified).
        If `precision` is `null` or not present, no precision considerations will be made.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^dimensionInput$"
            options:
              type: object
              required:
                - min
                - max
              properties:
                min:
                  type: integer
                  format: int64
                  description: minimum value for slider
                max:
                  type: integer
                  format: int64
                  description: maximum value for slider
                step:
                  type: number
                  format: double
                  default: 1.00
                  description: steps in the slider inbetween the ranges, should fit in the specified range
                precision:
                  type: integer
                  format: int64
                  description: number of significant digits to record in the result, if null or not present no precision considerations will be made
                  nullable: true
      example:
        type: numInput
        options:
          min: 0
          max: 5
          step: 1
          precision: 1
    SliderInputLabel:
      type: object
      required:
        - primary
        - secondary
        - gradientColor
        - primaryIcon
      properties:
        primary:
          type: string
          description: primary label, usually shown on the top
          nullable: true
        secondary:
          type: string
          description: secondary label, usually shown on the bottom
          nullable: true
        gradientColor:
          type: string
          format: hex color
          pattern: "^#[0-9A-Za-z]{6}$"
          description: hex color of the gradient
          nullable: true
        primaryIcon:
          type: string
          format: url
          description: icon url for primary label
      example:
        primary: "10"
        secondary: "Most pain"
        gradientColor: "#ff0000"
        primaryIcon: "https://your.domain.com/path/to/icon.svg"
    NumericRangedSliderInput:
      description: |
        Slider showing a computed list of numerically ranged values, according the `min`, `max`, `step`, and `precision`.
        Labels are shown at three points, min value, mid way, and the max value.
        If `step` is `null` or not present, assumed value of 1.
        If `precision` is `null` or not present, no precision considerations will be made.
        Values are arranged in descending order when `order: -1`, and ascending when `order: 1`.
        The example below will produce a dropdown of values from 5-1 descending with single-digit precision.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^rangeSlider$"
            options:
              type: object
              required:
                - min
                - max
                - labels
              properties:
                min:
                  type: integer
                  format: int64
                  description: minimum value for slider
                max:
                  type: integer
                  format: int64
                  description: maximum value for slider
                step:
                  type: number
                  format: double
                  default: 1.00
                  description: steps in the slider inbetween the ranges, should fit in the specified range
                precision:
                  type: integer
                  format: int64
                  description: number of significant digits to record in the result, if null or not present no precision considerations will be made
                  nullable: true
                order:
                  type: integer
                  format: int32
                  enum: [-1, 1]
                  description: sets ascending or decending from left to right with values of 1 and -1 respectively
                labels:
                  type: object
                  required:
                    - min
                    - half
                    - max
                  properties:
                    min:
                      $ref: '#/components/schemas/SliderInputLabel'
                    half:
                      $ref: '#/components/schemas/SliderInputLabel'
                    max:
                      $ref: '#/components/schemas/SliderInputLabel'
      example:
        type: rangeSlider
        options:
          min: 0
          max: 10
          step: 1
          precision: 1
          order: -1
          labels:
            min:
              primary: "1"
              secondary: "Least pain"
              gradientColor: "#00FF00"
              primaryIcon: "https://your.domain.com/path/to/icon.svg"
            half: null
            max:
              primary: "10"
              secondary: "Most pain"
              gradientColor: "#ff0000"
              primaryIcon: "https://your.domain.com/path/to/icon.svg"
